import React, { Component } from 'react';
import PropTypes from 'prop-types';
import './react-carousel.scss';

class Carousel extends Component {

  static propTypes = {
    children: PropTypes.array,
    transitionTime: PropTypes.number,
    dots: PropTypes.bool,
    arrows: PropTypes.bool,
    autoPlay: PropTypes.bool,
    autoplaySpeed: PropTypes.number,
  };

  static defaultProps = {
    transitionTime: 500,
    autoplaySpeed: 2000,
    autoPlay: true,
    dots: true,
    arrows: true,
  };

  state = {
    selectedItem: 0,
    wrapperWidth: 0,
  };

  componentDidMount = () => {
    this.computeWrapperWidth();
    this.bindEvents();
    this.autoPlay();
  };

  componentWillUnmount = () =>
    this.unBindEvents();

  handleChangeSlide = (index) => {
    this.handleClearIntervalAutoPlay();
    this.setState({
      selectedItem: this.state.selectedItem === (this.props.children.length - 1) ? 0 : index
    }, () => {
      this.autoPlay();
    });
  };

  bindEvents = () => {
    window.addEventListener('resize', this.computeWrapperWidth);
  };

  unBindEvents = () => {
    window.removeEventListener('resize', this.computeWrapperWidth);
    this.handleClearIntervalAutoPlay();
  };

  autoPlay = () => {
    if (this.props.autoPlay) {
      this.autoPlayInterval = setInterval(() =>
      this.handleChangeSlide(this.state.selectedItem + 1), this.props.autoplaySpeed);
      return this.autoPlayInterval;
    }
    return null;
  };

  handleClearIntervalAutoPlay = () =>
    clearInterval(this.autoPlayInterval);

  computeWrapperWidth = () => {
    const w = this.wrapper.offsetWidth;
    if (w) {
      this.setState({
        wrapperWidth: w
      });
    }
  };

  renderItems = () =>
  this.props.children.map((item, index) =>
    (<li key={index} className="react-carousel-item" style={{ width: this.state.wrapperWidth || 0 }}>{item}</li>));

  renderDots = () =>
  this.props.children.map((item, index) =>
    (<li
      key={index}
      onClick={() => this.handleChangeSlide(index)}
      className={`dot${this.state.selectedItem === index ? ' active' : ''}`}
    />));

  renderArrows = () =>
    [<li
      key="left-arrow"
      className="left-arrow icon-left-open center-vertical"
      onClick={() => this.handleChangeSlide(this.state.selectedItem - 1)}
    />,
      <li
        key="right-arrow"
        className="right-arrow icon-right-open center-vertical"
        onClick={() => this.handleChangeSlide(this.state.selectedItem + 1)}
      />];

  render() {
    if (!this.props.children || this.props.children.length === 0) {
      return null;
    }
    const position = this.state.selectedItem === 0 ? '0px' : `${-(this.state.wrapperWidth * this.state.selectedItem)}px`;
    const transformValue = `translate3d(${position},0,0)`;
    const transitionTime = `${this.props.transitionTime}ms`;
    const ulStyle = {
      WebkitTransform: transformValue,
      MozTransform: transformValue,
      MsTransform: transformValue,
      OTransform: transformValue,
      transform: transformValue,
      msTransform: transformValue,
      WebkitTransitionDuration: transitionTime,
      MozTransitionDuration: transitionTime,
      MsTransitionDuration: transitionTime,
      OTransitionDuration: transitionTime,
      transitionDuration: transitionTime,
      msTransitionDuration: transitionTime,
      width: this.state.wrapperWidth * this.props.children.length
    };
    return (
      <div className="react-carousel-wrapper" ref={(ref) => { this.wrapper = ref; }}>
        <div className="react-carousel-railroad">
          <ul className="react-carousel-stage" style={ulStyle}>
            {this.renderItems()}
          </ul>
          {this.props.arrows &&
          <ul className="react-carousel-arrows center-vertical">
            {this.renderArrows()}
          </ul>
        }
        </div>
        {this.props.dots &&
          <ul className="react-carousel-dots">
            {this.renderDots()}
          </ul>
        }
      </div>

    );
  }
}
export default Carousel;
