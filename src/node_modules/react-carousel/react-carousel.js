import React, { Component } from 'react';
import PropTypes from 'prop-types';
import './react-carousel.scss';

class Carousel extends Component {

  static propTypes = {
    children: PropTypes.array,
    transitionTime: PropTypes.number,
  };

  static defaultProps = {
    transitionTime: 500,
  };

  state = {
    selectedItem: 0,
    wrapperWidth: 0,
  };

  componentDidMount = () => {
    this.computeWrapperWidth();
    this.bindEvents();
  };

  bindEvents = () => {
    window.addEventListener('resize', this.computeWrapperWidth);
  };

  unBindEvents = () => {
    window.removeEventListener('resize', this.computeWrapperWidth);
  };

  computeWrapperWidth = () => {
    const w = this.wrapper.offsetWidth;
    if (w) {
      this.setState({
        wrapperWidth: w
      });
    }
  };

  renderItems = () =>
  this.props.children.map((item, index) =>
    <li key={index} className="react-carousel-item" style={{ width: this.state.wrapperWidth || 0 }}>{item}</li>);

  renderDots = () =>
  this.props.children.map((item, index) =>
    (<li
      key={index}
      onClick={() => this.setState({ selectedItem: index })}
      className={`dot${this.state.selectedItem === index ? ' active' : ''}`}
    />));

  render() {
    if (!this.props.children || this.props.children.length === 0) {
      return null;
    }
    const position = this.state.selectedItem === 0 ? '0px' : `${-(this.state.wrapperWidth * this.state.selectedItem)}px`;
    const transformValue = `translate3d(${position},0,0)`;
    const transitionTime = `${this.props.transitionTime}ms`;
    const ulStyle = {
      WebkitTransform: transformValue,
      MozTransform: transformValue,
      MsTransform: transformValue,
      OTransform: transformValue,
      transform: transformValue,
      msTransform: transformValue,
      WebkitTransitionDuration: transitionTime,
      MozTransitionDuration: transitionTime,
      MsTransitionDuration: transitionTime,
      OTransitionDuration: transitionTime,
      transitionDuration: transitionTime,
      msTransitionDuration: transitionTime,
      width: this.state.wrapperWidth * this.props.children.length
    };
    return (
      <div className="react-carousel-wrapper" ref={(ref) => { this.wrapper = ref; }}>
        <ul className="react-carousel-stage" style={ulStyle}>
          {this.renderItems()}
        </ul>
        <ul className="react-carousel-dots">
          {this.renderDots()}
        </ul>
      </div>
    );
  }
}
export default Carousel;
