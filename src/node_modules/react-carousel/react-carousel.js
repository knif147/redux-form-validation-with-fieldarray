import React, { Component } from 'react';
import PropTypes from 'prop-types';
import './react-carousel.scss';

class Carousel extends Component {

  static propTypes = {
    children: PropTypes.oneOfType([
      PropTypes.array,
      PropTypes.object
    ]),
    transitionTime: PropTypes.number,
    dots: PropTypes.bool,
    arrows: PropTypes.bool,
    autoPlay: PropTypes.bool,
    loop: PropTypes.bool,
    autoplaySpeed: PropTypes.number,
    slidesToShow: PropTypes.number,
  };

  static defaultProps = {
    transitionTime: 500,
    autoplaySpeed: 5000,
    autoPlay: true,
    dots: true,
    arrows: true,
    loop: true,
    slidesToShow: 1,
  };

  state = {
    selectedItem: 0,
    wrapperWidth: 0,
    slideWidth: 0,
  };

  componentDidMount = () => {
    this.checkLenghtOfChildren();
    this.computeWrapperWidth();
    this.bindEvents();
    this.autoPlay();
  };

  componentWillUnmount = () =>
    this.unBindEvents();

  debounce = (fun, mil) => () => {
    clearTimeout(this.timer);
    this.timer = setTimeout(() => {
      fun();
    }, mil);
  }

  checkLenghtOfChildren = () => {
    if (!this.props.children || (this.props.children.length === 0)) {
      return null;
    }
    if (this.props.children && !this.props.children.length) {
      return null;
    }
    return true;
  };

  handleChangeSlide = (index, clickedOnControlls, clickedOnLeftArrow) => {
    const { children, slidesToShow, loop } = this.props;

    let currentSlide = index;
    if (loop) {
      if (index === (slidesToShow + (children.length - (slidesToShow - 1)))) {
        currentSlide = 0;
      }
    } else if ((children.length - slidesToShow) < (index) && !clickedOnLeftArrow) {
      currentSlide = 0;
    }
    if (index < 0) {
      currentSlide = children.length - slidesToShow;
    }

    this.setState({
      selectedItem: currentSlide,
    }, () => {
      if (clickedOnControlls) {
        this.handleClearIntervalAutoPlay();
        this.autoPlay();
      }
    });
  };

  bindEvents = () =>
    window.addEventListener('resize', this.debounce(this.computeWrapperWidth, 400));

  unBindEvents = () => {
    window.removeEventListener('resize', this.computeWrapperWidth);
    this.handleClearIntervalAutoPlay();
  };

  autoPlay = () => {
    if (this.props.autoPlay) {
      this.autoPlayInterval = setInterval(() =>
        this.handleChangeSlide(this.state.selectedItem + 1), this.props.autoplaySpeed);
      return this.autoPlayInterval;
    }
    return null;
  };

  handleClearIntervalAutoPlay = () =>
    clearInterval(this.autoPlayInterval);

  computeWrapperWidth = () => {
    const w = this.wrapper && this.wrapper.offsetWidth;
    if (w) {
      this.setState({
        wrapperWidth: w,
        slideWidth: (w / this.props.slidesToShow) || w
      });
    }
  };

  renderItems = () =>
  [...this.props.children, ...(this.props.children.slice(0, this.props.slidesToShow))].map((item, index) =>
    (<li key={index} className="react-carousel-item" style={{ width: this.state.slideWidth }}>{item}</li>));

  renderDots = () => {
    const LENGTH = this.props.slidesToShow === 1 ? this.props.children.length : (this.props.children.length) - (this.props.slidesToShow - 1);
    const els = [];
    for (let index = 0; index < LENGTH; index += 1) {
      // (this.props.children.length + index)
      els.push(<li
        key={index}
        onClick={() => this.handleChangeSlide(index, true)}
        className={`dot${(this.state.selectedItem === index) || (this.state.selectedItem === 0 && index === 0) ? ' active' : ''}`}
      />);
    }
    return els;
  };

  renderArrows = () =>
    [<li
      key="left-arrow"
      className="left-arrow icon-left-open center-vertical"
      onClick={this.debounce(() => {
        if (this.state.selectedItem === (this.props.children.length - 1)) {
          return this.handleChangeSlide(this.props.children.length - 2, true, true);
        }
        return this.handleChangeSlide(this.state.selectedItem - 1);
      }, 40)}
    />,
      <li
        key="right-arrow"
        className="right-arrow icon-right-open center-vertical"
        onClick={this.debounce(() => this.handleChangeSlide(this.state.selectedItem + 1, true), 40)}
      />];

  render() {
    if (!this.checkLenghtOfChildren()) {
      return null;
    }
    const position = this.state.selectedItem === 0 ? '0px' : `${-(this.state.slideWidth * this.state.selectedItem)}px`;
    const transformValue = `translate3d(${position},0,0)`;
    const transitionTime = `${this.props.transitionTime}ms`;
    const ulStyle = {
      WebkitTransform: transformValue,
      MozTransform: transformValue,
      MsTransform: transformValue,
      OTransform: transformValue,
      transform: transformValue,
      msTransform: transformValue,
      WebkitTransitionDuration: transitionTime,
      MozTransitionDuration: transitionTime,
      MsTransitionDuration: transitionTime,
      OTransitionDuration: transitionTime,
      transitionDuration: transitionTime,
      msTransitionDuration: transitionTime,
      width: (this.state.wrapperWidth * (this.props.children.length + this.props.slidesToShow))
    };
    return (
      <div className="react-carousel-wrapper" ref={(ref) => { this.wrapper = ref; }}>
        <div className="react-carousel-railroad">
          <ul className="react-carousel-stage" style={ulStyle}>
            {this.renderItems()}
          </ul>
          {this.props.arrows &&
          <ul className="react-carousel-arrows center-vertical">
            {this.renderArrows()}
          </ul>
        }
        </div>
        {this.props.dots &&
          <ul className="react-carousel-dots">
            {this.renderDots()}
          </ul>
        }
      </div>

    );
  }
}
export default Carousel;
