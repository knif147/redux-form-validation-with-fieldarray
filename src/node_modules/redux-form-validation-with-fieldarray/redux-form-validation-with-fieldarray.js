import memoize from 'lru-memoize';

const join = rules => (value, data) => rules.map(rule => rule(value, data)).filter(error => !!error)[0];

const isFunction = v => typeof v === 'function';

function createReduxFormValidator(rules) {
  return (data = {}) => {
    const errors = {};
    Object.keys(rules).forEach((key) => {
      if (Array.isArray(rules[key]) || (isFunction(rules[key]) && Array.isArray(rules[key]()))) {
        const rule = join([].concat(isFunction(rules[key]) ? rules[key](data[key], data) : rules[key]));
        const error = rule(data[key], data);
        if (error) {
          errors[key] = error;
        }
      } else {
        const subErrors = [];
        const itemError = {};
        Object.keys(rules[key]).forEach((subKey) => {
          if (data[key] && data[key].length > 0) {
            const rule = join([].concat(isFunction(rules[key][subKey]) ? rules[key][subKey](data[key]) : rules[key][subKey]));
            data[key].forEach((item, index) => {
              itemError[subKey] = rule(item[subKey], data);
              subErrors[index] = itemError;
            });
            if (!errors[key]) {
              errors[key] = {};
            }
          }
        });

        if (subErrors.length !== 0) {
          errors[key] = subErrors;
        }
      }
    });
    return errors;
  };
}

export default memoize(10)(createReduxFormValidator);
