import memoize from 'lru-memoize';
import join from './helpers/join';
import isFunction from './helpers/isFunction';

/**
 * @function
 * @name createReduxFormValidator
 * @param {object} rules
 * @returns {object} errors
 */
const createReduxFormValidator = rules => (data = {}) => {
  const errors = {};
  Object.keys(rules).forEach((key) => {
    if (Array.isArray(rules[key]) || (isFunction(rules[key]) && Array.isArray(rules[key]()))) {
      const rule = join([].concat(isFunction(rules[key]) ? rules[key](data[key], data) : rules[key]));
      const error = rule(data[key], data);
      if (error) {
        errors[key] = error;
      }
    } else {
      const subErrors = [];
      Object.keys(rules[key]).forEach((subKey) => {
        if (data[key] && data[key].length > 0) {
          const itemIsFunction = isFunction(rules[key][subKey]);
          data[key].forEach((item, index) => {
            const rule = join([].concat(itemIsFunction ? rules[key][subKey](item[subKey], data, index) : rules[key][subKey]));
            subErrors[index] = {
              ...subErrors[index],
              [subKey]: rule(item[subKey], data)
            };
          });
          if (!errors[key]) {
            errors[key] = {};
          }
        }
      });

      if (subErrors.length !== 0) {
        errors[key] = subErrors;
      }
    }
  });
  return errors;
};

export default memoize(10)(createReduxFormValidator);
